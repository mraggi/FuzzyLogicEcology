cmake_minimum_required(VERSION 2.6)
project(fuzzylogic)

set(CMAKE_BUILD_TYPE Release)
add_definitions(-std=c++14 -O3 -march=native)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/QuercusOaxaca.txt ${CMAKE_CURRENT_BINARY_DIR}/QuercusOaxaca.txt COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/lobatae.txt ${CMAKE_CURRENT_BINARY_DIR}/lobatae.txt COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/redes_centro.txt ${CMAKE_CURRENT_BINARY_DIR}/redes_centro.txt COPYONLY)

add_subdirectory(Graph)
include_directories(Graph)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules")
message("Cmake modules in " ${CMAKE_MODULE_PATH})
find_package(ArrayFire)
include_directories(${ArrayFire_INCLUDE_DIRS})
find_package(CUDA) 
find_package(NVVM)
find_package(OpenCL)
find_package(Eigen3)
find_package(BLAZE)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")

if (BLAZE_FOUND)
	message("Blaze Library found!")
	message("threadlibs: " ${CMAKE_THREAD_LIBS_INIT}) 
	set(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT})
	include_directories(${BLAZE_INCLUDE_DIR})
elseif (EIGEN3_FOUND)
	message("Eigen Library found!")
	set(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT})
	include_directories(${EIGEN3_INCLUDE_DIR})
elseif (ArrayFire_CUDA_FOUND)
	message("arrayfire cuda found!")
	add_definitions(-DUSE_GPU)
	set(EXTRA_LIBS ${ArrayFire_CUDA_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${CUDA_LIBRARIES} ${NVVM_LIB})
elseif(ArrayFire_OpenCL_FOUND)
	message("arrayfire OpenCL found!")
	add_definitions(-DUSE_GPU)
	set(EXTRA_LIBS ${ArrayFire_OpenCL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${OpenCL_LIBRARIES})
else()
	message("Neither eigen nor blaze nor arrayfire library found! Using old version!")
	set(EXTRA_LIBS ${CMAKE_THREAD_LIBS_INIT})
endif()

if (BLAZE_FOUND)
	set(MYSOURCES main.cpp Point.cpp ReadFile.cpp GraphCalculator_Blaze.cpp)		
elseif (EIGEN3_FOUND)
	set(MYSOURCES main.cpp Point.cpp ReadFile.cpp GraphCalculator_Eigen.cpp)		
elseif (ArrayFire_CUDA_FOUND OR ArrayFire_OpenCL_FOUND)
	set(MYSOURCES main.cpp Point.cpp ReadFile.cpp GraphCalculator_GPU.cpp)
else()
	set(MYSOURCES main.cpp Point.cpp ReadFile.cpp Mu.cpp GraphCalculator.cpp)
endif()

add_executable(fuzzylogic ${MYSOURCES})

target_link_libraries(fuzzylogic graph ${EXTRA_LIBS})
